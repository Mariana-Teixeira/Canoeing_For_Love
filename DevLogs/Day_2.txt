31-03-2023
+ After learning WebGL doesn't read directly from StreamingAssets, I had to find a way to make my .json file readable from the web. I started searching solutions.
+ It seemed I needed a companion program to communicate with my Unity program. Although, I seemed simpler to convert my JSON files into scriptable objects, I was curious to learn more about web servers.
+ I realized I was looking at the wrong thing. Unity's StreamAssetsFolder is accessible through WebGL, but not directly. With this new insight, I started search for better solutions to my problem. I needed to learn about WebRequest.
+ The code that loaded a menu image stopped working. I wasn't unsure why, but I decided to simply comment the code and finish attempting to read JSON Files through WebGL.
+ I coded my WebRequest, but when uploading and testing the build on itch.io, it threw errors I couldn't comprehend. I needed a way to debug my game from the build, so I researched some methods of doing that on the Unity Documentation.
+ I wasn't sure how best to debug my webgl application, so I ended up using Debug.Logs on important methods and track them with the JavaScript Console on my browser. Although seemingly archaic, I realized the game was trying to run without having loaded the JSON files. I think this might happen, because I need to lead the JSON files in a Coroutine. A call the coroutine in the Awake method, but it is still loading the JSON Files when the program starts running the Start method.
+ To test my theory, I quickfixed my coroutine to wait about 3 seconds before starting the game. This is a bad implementation, but I wasn't sure how else to check that my theory was right.
+ The quickfix worked! I am happy to have found the issue, but now I have many more to fix. For one, my quickfix isn't good at any level. I need to learn how to properly load assets of a game in order. As I was searching around solutions, I found many more bits of code that were hard to read, multiple variables with undescriptive names, methods that executed a lot of logic. I decided to start cleaning some of the code, so that I could more easily move around the code without getting lost in the spaguetti.
+ As I was reading through the different, I found my first big chunk that I wanted to tackle by cleaning and improving it's execution. The loading of the JSON File was a mess of nested if-statements. I new that it could be better, because I had previously loaded a JSON File using NewtonSoft.
+ I had to research the method I had used again, because I didn't write it down anywhere. I seached for the "NewtonSoft Json.NET" documentation and the "Discriminated Json Subtypes Converter implementation for .NET" documentation.
+ So that I wouldn't alter our dialogue.json, I created a test.json with dummy dialogue. Later, I would have to find a better way to create .json files, since our method for the game was to painfully write them out by "hand".

+ It was after struggling for about an hour on how I should redo this system that I realized I was spending my time addressing the least concerning issues. The deserialization of JSON files wasn't good, but it was working. There were bigger issues happening: assets were out of place, the game was missing a loading screen. There were features that couldn't be utilized, due to the removal of CineMachine. I was getting lost on the sauce, so I decided to take a break.